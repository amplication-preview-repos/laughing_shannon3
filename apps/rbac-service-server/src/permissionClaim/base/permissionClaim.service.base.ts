/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PermissionClaim as PrismaPermissionClaim,
  Role as PrismaRole,
} from "@prisma/client";

export class PermissionClaimServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PermissionClaimCountArgs, "select">
  ): Promise<number> {
    return this.prisma.permissionClaim.count(args);
  }

  async permissionClaims(
    args: Prisma.PermissionClaimFindManyArgs
  ): Promise<PrismaPermissionClaim[]> {
    return this.prisma.permissionClaim.findMany(args);
  }
  async permissionClaim(
    args: Prisma.PermissionClaimFindUniqueArgs
  ): Promise<PrismaPermissionClaim | null> {
    return this.prisma.permissionClaim.findUnique(args);
  }
  async createPermissionClaim(
    args: Prisma.PermissionClaimCreateArgs
  ): Promise<PrismaPermissionClaim> {
    return this.prisma.permissionClaim.create(args);
  }
  async updatePermissionClaim(
    args: Prisma.PermissionClaimUpdateArgs
  ): Promise<PrismaPermissionClaim> {
    return this.prisma.permissionClaim.update(args);
  }
  async deletePermissionClaim(
    args: Prisma.PermissionClaimDeleteArgs
  ): Promise<PrismaPermissionClaim> {
    return this.prisma.permissionClaim.delete(args);
  }

  async getRole(parentId: string): Promise<PrismaRole | null> {
    return this.prisma.permissionClaim
      .findUnique({
        where: { id: parentId },
      })
      .role();
  }
}
