/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PermissionClaim } from "./PermissionClaim";
import { PermissionClaimCountArgs } from "./PermissionClaimCountArgs";
import { PermissionClaimFindManyArgs } from "./PermissionClaimFindManyArgs";
import { PermissionClaimFindUniqueArgs } from "./PermissionClaimFindUniqueArgs";
import { CreatePermissionClaimArgs } from "./CreatePermissionClaimArgs";
import { UpdatePermissionClaimArgs } from "./UpdatePermissionClaimArgs";
import { DeletePermissionClaimArgs } from "./DeletePermissionClaimArgs";
import { Role } from "../../role/base/Role";
import { PermissionClaimService } from "../permissionClaim.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PermissionClaim)
export class PermissionClaimResolverBase {
  constructor(
    protected readonly service: PermissionClaimService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PermissionClaim",
    action: "read",
    possession: "any",
  })
  async _permissionClaimsMeta(
    @graphql.Args() args: PermissionClaimCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PermissionClaim])
  @nestAccessControl.UseRoles({
    resource: "PermissionClaim",
    action: "read",
    possession: "any",
  })
  async permissionClaims(
    @graphql.Args() args: PermissionClaimFindManyArgs
  ): Promise<PermissionClaim[]> {
    return this.service.permissionClaims(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PermissionClaim, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PermissionClaim",
    action: "read",
    possession: "own",
  })
  async permissionClaim(
    @graphql.Args() args: PermissionClaimFindUniqueArgs
  ): Promise<PermissionClaim | null> {
    const result = await this.service.permissionClaim(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PermissionClaim)
  @nestAccessControl.UseRoles({
    resource: "PermissionClaim",
    action: "create",
    possession: "any",
  })
  async createPermissionClaim(
    @graphql.Args() args: CreatePermissionClaimArgs
  ): Promise<PermissionClaim> {
    return await this.service.createPermissionClaim({
      ...args,
      data: {
        ...args.data,

        role: args.data.role
          ? {
              connect: args.data.role,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PermissionClaim)
  @nestAccessControl.UseRoles({
    resource: "PermissionClaim",
    action: "update",
    possession: "any",
  })
  async updatePermissionClaim(
    @graphql.Args() args: UpdatePermissionClaimArgs
  ): Promise<PermissionClaim | null> {
    try {
      return await this.service.updatePermissionClaim({
        ...args,
        data: {
          ...args.data,

          role: args.data.role
            ? {
                connect: args.data.role,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PermissionClaim)
  @nestAccessControl.UseRoles({
    resource: "PermissionClaim",
    action: "delete",
    possession: "any",
  })
  async deletePermissionClaim(
    @graphql.Args() args: DeletePermissionClaimArgs
  ): Promise<PermissionClaim | null> {
    try {
      return await this.service.deletePermissionClaim(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Role, {
    nullable: true,
    name: "role",
  })
  @nestAccessControl.UseRoles({
    resource: "Role",
    action: "read",
    possession: "any",
  })
  async getRole(
    @graphql.Parent() parent: PermissionClaim
  ): Promise<Role | null> {
    const result = await this.service.getRole(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
